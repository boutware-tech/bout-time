/**                 ***COPYRIGHT STARTS HERE***
 *  BoutTime - the wrestling tournament administrator.
 *
 *  Copyright (C) 2012  Jeffrey K. Rutt
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *                  ***COPYRIGHT ENDS HERE***                                */

package bouttime.gui.panel;

import bouttime.dao.Dao;
import bouttime.mainview.BoutTimeView;
import bouttime.model.Bout;
import bouttime.sort.BoutNumSort;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.jdesktop.application.Action;

public class BoutListMatPanel extends BoutListPanel {
    
    String mat;

    /** Creates new form BoutListMatPanel */
    public BoutListMatPanel() {
        this(null);
    }
    
    /** Creates new form BoutListMatPanel */
    public BoutListMatPanel(BoutTimeView v) {
        super(v);
    }
    
    public void setMat(String mat) {
        this.mat = mat;
    }

    /**
     * Update the GUI table with the list of bouts for the given mat.
     * @param mat The mat to get the list of bouts from.
     */
    public void updateList(String mat) {
        this.mat = mat;
        
        list.clear();
        
        if (this.view == null) {
            logger.warn("Unable to update list : this.view is null.");
            return;
        }

        Dao dao = this.view.getDao();
        if (!dao.isOpen()) {
            logger.warn("Unable to update bout list : DAO is not open.");
            return;  // do nothing
        }
        
        List<Bout> bList;
        
        if ((mat == null) || (mat.isEmpty())) {
            bList = new ArrayList<Bout>(dao.getAllBouts());
        } else {
            bList = new ArrayList<Bout>(dao.getBoutsByMat(mat));
        }
        if (bList == null) {
            logger.error("No bouts for mat [" + mat + "]");
            return;
        }

        Collections.sort(bList, new BoutNumSort());
        list.addAll(bList);
    }

    @Action
    @Override
    public void updateAction() {
        if ((this.list == null) || this.list.isEmpty()) {
            return;
        }
        
        updateList(this.mat);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
